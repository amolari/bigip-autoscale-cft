{
 "AWSTemplateFormatVersion": "2010-09-09",
 "Conditions": {
  "noCustomImageId": {
   "Fn::Equals": [
    "OPTIONAL",
    {
     "Ref": "customImageId"
    }
   ]
  },
  "noSkuKeyword1": {
   "Fn::Equals": [
    "OPTIONAL",
    {
     "Ref": "bigIqLicenseSkuKeyword1"
    }
   ]
  },
  "noSkuKeyword2": {
   "Fn::Equals": [
    "OPTIONAL",
    {
     "Ref": "bigIqLicenseSkuKeyword2"
    }
   ]
  },
  "noTenant": {
   "Fn::Equals": [
    "OPTIONAL",
    {
     "Ref": "bigIqLicenseTenant"
    }
   ]
  },
  "noUnitOfMeasure": {
   "Fn::Equals": [
    "OPTIONAL",
    {
     "Ref": "bigIqLicenseUnitOfMeasure"
    }
   ]
  },
  "noWebProxy": {
   "Fn::Equals": [
    "OPTIONAL",
    {
     "Ref": "webProxyFQDN"
    }
   ]
  },
  "useWebProxy": {"Fn::Not": [{"Fn::Equals" : [{"Ref" : "webProxyFQDN"}, ""]}]},
  "optin": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "allowUsageAnalytics"
    }
   ]
  },
  "usePublicIP": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "provisionPublicIP"
    }
   ]
  }
 },
 "Description": "Template v5.7.1: AWS CloudFormation Template for creating a Across-AZs cluster of 2NIC BIG-IPs in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
 "Mappings": {
  "BigipRegionMap": {
   "ap-east-1": {
    "AllOneBootLocation": "ami-023e9cef987d3ff28",
    "AllTwoBootLocations": "ami-0c0ab75887aee070f",
    "LTMOneBootLocation": "ami-0cb39b1c0fb8a59ef",
    "LTMTwoBootLocations": "ami-08d7fbf921667623a"
   },
   "ap-northeast-1": {
    "AllOneBootLocation": "ami-0e7927f692e2b2a07",
    "AllTwoBootLocations": "ami-0ce6dfc763fe76345",
    "LTMOneBootLocation": "ami-0efd0a6f319436174",
    "LTMTwoBootLocations": "ami-062a31f3171eeda73"
   },
   "ap-northeast-2": {
    "AllOneBootLocation": "ami-01266e8602f860e07",
    "AllTwoBootLocations": "ami-0ab55667ccd38c1e9",
    "LTMOneBootLocation": "ami-09b4e04faa2a62932",
    "LTMTwoBootLocations": "ami-0d70cc7778418f21c"
   },
   "ap-south-1": {
    "AllOneBootLocation": "ami-07c94e67dd3be73bd",
    "AllTwoBootLocations": "ami-0577e681defe36d3a",
    "LTMOneBootLocation": "ami-04de23e871e74305b",
    "LTMTwoBootLocations": "ami-058cf79d3e97d4879"
   },
   "ap-southeast-1": {
    "AllOneBootLocation": "ami-069cfaad23330c9f4",
    "AllTwoBootLocations": "ami-0daf7ecfd1d5848f4",
    "LTMOneBootLocation": "ami-0c5a73940d67758e7",
    "LTMTwoBootLocations": "ami-0554cde829edef15a"
   },
   "ap-southeast-2": {
    "AllOneBootLocation": "ami-0bd950481f70e429d",
    "AllTwoBootLocations": "ami-012acc5cdab881a3b",
    "LTMOneBootLocation": "ami-000d69519ff56db45",
    "LTMTwoBootLocations": "ami-0eeac5a28f5c13efd"
   },
   "ca-central-1": {
    "AllOneBootLocation": "ami-0cf79189f07182154",
    "AllTwoBootLocations": "ami-0caf6ef0b9176ca51",
    "LTMOneBootLocation": "ami-0d73e7421618e2f8b",
    "LTMTwoBootLocations": "ami-0e13f9aba220e46ba"
   },
   "cn-north-1": {
    "AllOneBootLocation": "ami-0129a17cc26e41591",
    "AllTwoBootLocations": "ami-0c1cbf6ec50fde9d5",
    "LTMOneBootLocation": "ami-0cd930752c16aec43",
    "LTMTwoBootLocations": "ami-0c866ce278cb8dd05"
   },
   "cn-northwest-1": {
    "AllOneBootLocation": "ami-0945183f07525ddf3",
    "AllTwoBootLocations": "ami-0eb2d6deb33f5d917",
    "LTMOneBootLocation": "ami-0a8ff3d4b265351c0",
    "LTMTwoBootLocations": "ami-027293b5f5abb9687"
   },
   "eu-central-1": {
    "AllOneBootLocation": "ami-0e34312efc4b1c678",
    "AllTwoBootLocations": "ami-0f126f2823a9f01c8",
    "LTMOneBootLocation": "ami-06a4075653a3dfe35",
    "LTMTwoBootLocations": "ami-044b620cabf619814"
   },
   "eu-north-1": {
    "AllOneBootLocation": "ami-0083f3809917f690f",
    "AllTwoBootLocations": "ami-0f62d6b13878f82b2",
    "LTMOneBootLocation": "ami-0f13edf5938f7abd5",
    "LTMTwoBootLocations": "ami-0051b21d40a6d7cb0"
   },
   "eu-west-1": {
    "AllOneBootLocation": "ami-0e6de1d39e8238791",
    "AllTwoBootLocations": "ami-0c157bf4dbefe3d04",
    "LTMOneBootLocation": "ami-0fc2623834bcc2ba0",
    "LTMTwoBootLocations": "ami-046807056044d5795"
   },
   "eu-west-2": {
    "AllOneBootLocation": "ami-0647708bae5ab110a",
    "AllTwoBootLocations": "ami-03e652694fb9b1d9e",
    "LTMOneBootLocation": "ami-0a8ff9b06cbc0c461",
    "LTMTwoBootLocations": "ami-013ce31b36ec9c2f2"
   },
   "eu-west-3": {
    "AllOneBootLocation": "ami-0c2042bd5a3cedca1",
    "AllTwoBootLocations": "ami-0cda87d99f53da21b",
    "LTMOneBootLocation": "ami-058bad5f806c249bf",
    "LTMTwoBootLocations": "ami-0720266adc633364b"
   },
   "me-south-1": {
    "AllOneBootLocation": "ami-071cd3f00ecb24182",
    "AllTwoBootLocations": "ami-02a363ab4280142c8",
    "LTMOneBootLocation": "ami-0b2663c6e73e5bda1",
    "LTMTwoBootLocations": "ami-0e087fb7e60bfc9c6"
   },
   "sa-east-1": {
    "AllOneBootLocation": "ami-0f848511fd8ec666e",
    "AllTwoBootLocations": "ami-016ea926cbaf31d04",
    "LTMOneBootLocation": "ami-06e201745064f6673",
    "LTMTwoBootLocations": "ami-020f47b1f5959954e"
   },
   "us-east-1": {
    "AllOneBootLocation": "ami-0a3be2692efa997b1",
    "AllTwoBootLocations": "ami-019d034be61bb654b",
    "LTMOneBootLocation": "ami-01fa373169d58756e",
    "LTMTwoBootLocations": "ami-00c4b390b9c3a297e"
   },
   "us-east-2": {
    "AllOneBootLocation": "ami-0df9dc673d3be37d4",
    "AllTwoBootLocations": "ami-0ebeb5e2cb20666da",
    "LTMOneBootLocation": "ami-05e9b9ebec1e1ca79",
    "LTMTwoBootLocations": "ami-06b5f2c0ab10bf2f6"
   },
   "us-gov-east-1": {
    "AllOneBootLocation": "ami-0fb95189286e91096",
    "AllTwoBootLocations": "ami-0d87a5ce04472cc89",
    "LTMOneBootLocation": "ami-0aa2f311b49a043a1",
    "LTMTwoBootLocations": "ami-081db06e39084b66c"
   },
   "us-gov-west-1": {
    "AllOneBootLocation": "ami-0e241a712c001179d",
    "AllTwoBootLocations": "ami-05766e6a1f67c1fb7",
    "LTMOneBootLocation": "ami-0b6f62e542082066c",
    "LTMTwoBootLocations": "ami-0eba26b2b349e0bf0"
   },
   "us-west-1": {
    "AllOneBootLocation": "ami-0c0f2ed76eccc171c",
    "AllTwoBootLocations": "ami-01eb3823cebf4746d",
    "LTMOneBootLocation": "ami-0833e1682a0f5830e",
    "LTMTwoBootLocations": "ami-097970128a58e4378"
   },
   "us-west-2": {
    "AllOneBootLocation": "ami-0aaec7c853871f2e8",
    "AllTwoBootLocations": "ami-0f132de42336f3ef1",
    "LTMOneBootLocation": "ami-003c200fe06a20b8d",
    "LTMTwoBootLocations": "ami-089f4fc6d8b168cb3"
   }
  }
 },
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "NETWORKING CONFIGURATION"
     },
     "Parameters": [
      "Vpc",
      "managementSubnetAz1",
      "managementSubnetAz2",
      "subnet1Az1",
      "subnet1Az2",
      "subnet2Az1",
      "subnet2Az2",
      "availabilityZone1",
      "availabilityZone2",
      "numberOfAdditionalNics",
      "additionalNicLocation",
      "provisionPublicIP",
      "alienRangeCIDR",
      "webProxyFQDN"
     ]
    },
    {
     "Label": {
      "default": "INSTANCE CONFIGURATION"
     },
     "Parameters": [
      "imageName",
      "customImageId",
      "instanceType",
      "applicationInstanceType",
      "licenseKey1",
      "licenseKey2",
      "managementGuiPort",
      "sshKey",
      "restrictedSrcAddress",
      "restrictedSrcAddressApp",
      "ntpServer",
      "timezone",
      "bigIpModules"
     ]
    },
    {
     "Label": {
      "default": "TAGS"
     },
     "Parameters": [
      "application",
      "environment",
      "powerpolicy",
      "sla",
      "os",
      "platform",
      "configmanagement",
      "monitoringlevel"
     ]
    },
    {
     "Label": {
      "default": "BIG-IQ LICENSING CONFIGURATION"
     },
     "Parameters": [
      "bigIqAddress",
      "bigIqUsername",
      "bigIqPasswordS3Arn",
      "bigIqLicensePoolName",
      "bigIqLicenseTenant",
      "bigIqLicenseUnitOfMeasure",
      "bigIqLicenseSkuKeyword1",
      "bigIqLicenseSkuKeyword2"
     ]
    },
    {
     "Label": {
      "default": "TEMPLATE ANALYTICS"
     },
     "Parameters": [
      "allowUsageAnalytics",
      "allowPhoneHome"
     ]
    },
    {
     "Label": {
      "default": "VIRTUAL SERVICE CONFIGURATION"
     },
     "Parameters": [
      "declarationUrl"
     ]
    }
   ],
   "ParameterLabels": {
    "Vpc": {
     "default": "VPC"
    },
    "additionalNicLocation": {
     "default": "Additional NIC Location"
    },
    "alienRangeCIDR": {
     "default": "Alien Range CIDR"
    },
    "allowPhoneHome": {
     "default": "Send Anonymous Device Statistics to F5"
    },
    "allowUsageAnalytics": {
     "default": "Send Anonymous Template Statistics to F5"
    },
    "application": {
     "default": "Application"
    },
    "applicationInstanceType": {
     "default": "Application Instance Type"
    },
    "availabilityZone1": {
     "default": "Availability Zone 1"
    },
    "availabilityZone2": {
     "default": "Availability Zone 2"
    },
    "bigIpModules": {
     "default": "BIG-IP Modules"
    },
    "bigIqAddress": {
     "default": "BIG-IQ address (private)"
    },
    "bigIqLicensePoolName": {
     "default": "BIG-IQ License Pool Name"
    },
    "bigIqLicenseSkuKeyword1": {
     "default": "BIG-IQ SKU Keyword 1"
    },
    "bigIqLicenseSkuKeyword2": {
     "default": "BIG-IQ SKU Keyword 2"
    },
    "bigIqLicenseTenant": {
     "default": "BIG-IQ Tenant"
    },
    "bigIqLicenseUnitOfMeasure": {
     "default": "BIG-IQ Unit Of Measure"
    },
    "bigIqPasswordS3Arn": {
     "default": "S3 ARN of the BIG-IQ Password File"
    },
    "bigIqUsername": {
     "default": "BIG-IQ user with Licensing Privileges"
    },
    "configmanagement": {
     "default": "ConfigManagement"
    },
    "customImageId": {
     "default": "Custom Image Id"
    },
    "declarationUrl": {
     "default": "AS3 Declaration URL"
    },
    "deploymentName": {
     "default": "Deployment Name"
    },
    "environment": {
     "default": "Environment"
    },
    "group": {
     "default": "Group"
    },
    "imageName": {
     "default": "BIG-IP Image Name"
    },
    "instanceType": {
     "default": "AWS Instance Size"
    },
    "licenseKey1": {
     "default": "License Key 1"
    },
    "licenseKey2": {
     "default": "License Key 2"
    },
    "managementGuiPort": {
     "default": "BIG-IP Management Port"
    },
    "managementSubnetAz1": {
     "default": "Management Subnet AZ1"
    },
    "managementSubnetAz2": {
     "default": "Management Subnet AZ2"
    },
    "monitoringlevel": {
     "default": "MonitoringLevel"
    },
    "ntpServer": {
     "default": "NTP Server"
    },
    "numberOfAdditionalNics": {
     "default": "Number Of Additional NICs"
    },
     "os": {
     "default": "OS"
    },
    "platform": {
     "default": "Platform"
    },
    "powerpolicy": {
     "default": "PowerPolicy"
    },
    "provisionPublicIP": {
     "default": "Provision Public IP addresses for the BIG-IP interfaces"
    },
    "restrictedSrcAddress": {
     "default": "Source Address(es) for Management Access"
    },
    "restrictedSrcAddressApp": {
     "default": "Source Address(es) for Web Application Access (80/443)"
    },
    "sla": {
     "default": "SLA"
    },
    "sshKey": {
     "default": "SSH Key"
    },
    "subnet1Az1": {
     "default": "Subnet1 in AZ1"
    },
    "subnet1Az2": {
     "default": "Subnet1 in AZ2"
    },
    "subnet2Az1": {
     "default": "Subnet2 in AZ1"
    },
    "subnet2Az2": {
     "default": "Subnet2 in AZ2"
    },
    "timezone": {
     "default": "Timezone (Olson)"
    },
    "webProxyFQDN": {
     "default": "Web Proxy FQDN"
    }
   }
  },
  "Version": "5.7.1"
 },
 "Outputs": {
  "alienRangeCIDR": {
     "Description": " The IP address range representing the alien range (VS subnet)",
     "Value": {
    "Ref": "alienRangeCIDR"
   }     
  },
  "Bigip1ExternalInterfacePrivateIp": {
   "Description": "Internally routable IP of the public interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1subnet1Az1Interface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip1InstanceId": {
   "Description": "Instance Id of BIG-IP in Amazon",
   "Value": {
    "Ref": "Bigip1Instance"
   }
  },
  "Bigip1ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP address of the management port on BIG-IP",
   "Value": {
    "Ref": "Bigip1ManagementEipAddress"
   }
  },
  "Bigip1ManagementInterface": {
   "Description": "Management interface ID on BIG-IP",
   "Value": {
    "Ref": "Bigip1ManagementInterface"
   }
  },
  "Bigip1ManagementInterfacePrivateIp": {
   "Description": "Internally routable IP of the management interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1ManagementInterface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip1Url": {
   "Condition": "usePublicIP",
   "Description": "BIG-IP Management GUI",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "Bigip1Instance",
        "PublicIp"
       ]
      }
     ]
    ]
   }
  },
  "Bigip1VipEipAddress": {
   "Condition": "usePublicIP",
   "Description": "EIP address for VIP",
   "Value": {
    "Fn::Join": [
     "",
     [
      "http://",
      {
       "Ref": "Bigip1VipEipAddress"
      },
      ":80"
     ]
    ]
   }
  },
  "Bigip1subnet1Az1Interface": {
   "Description": "External interface Id on BIG-IP",
   "Value": {
    "Ref": "Bigip1subnet1Az1Interface"
   }
  },
  "Bigip1subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP Address of the External interface attached to BIG-IP",
   "Value": {
    "Ref": "Bigip1subnet1Az1SelfEipAddress"
   }
  },
  "Bigip2ExternalInterfacePrivateIp": {
   "Description": "Internally routable IP of the public interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip2subnet1Az2Interface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip2InstanceId": {
   "Description": "Instance Id of BIG-IP in Amazon",
   "Value": {
    "Ref": "Bigip2Instance"
   }
  },
  "Bigip2ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP address of the management port on BIG-IP",
   "Value": {
    "Ref": "Bigip2ManagementEipAddress"
   }
  },
  "Bigip2ManagementInterface": {
   "Description": "Management interface ID on BIG-IP",
   "Value": {
    "Ref": "Bigip2ManagementInterface"
   }
  },
  "Bigip2ManagementInterfacePrivateIp": {
   "Description": "Internally routable IP of the management interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip2ManagementInterface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip2Url": {
   "Condition": "usePublicIP",
   "Description": "BIG-IP Management GUI",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "Bigip2Instance",
        "PublicIp"
       ]
      }
     ]
    ]
   }
  },
  "Bigip2subnet1Az2Interface": {
   "Description": "External interface Id on BIG-IP",
   "Value": {
    "Ref": "Bigip2subnet1Az2Interface"
   }
  },
  "Bigip2subnet1Az2SelfEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP Address of the External interface attached to BIG-IP",
   "Value": {
    "Ref": "Bigip2subnet1Az2SelfEipAddress"
   }
  },
  "availabilityZone1": {
   "Description": "Availability Zone",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1Instance",
     "AvailabilityZone"
    ]
   }
  },
  "availabilityZone2": {
   "Description": "Availability Zone",
   "Value": {
    "Fn::GetAtt": [
     "Bigip2Instance",
     "AvailabilityZone"
    ]
   }
  },
  "bigipExternalSecurityGroup": {
   "Description": "Public or External Security Group",
   "Value": {
    "Ref": "bigipExternalSecurityGroup"
   }
  },
  "bigipManagementSecurityGroup": {
   "Description": "Management Security Group",
   "Value": {
    "Ref": "bigipManagementSecurityGroup"
   }
  },
  "webProxyFQDN": {
   "Condition": "useWebProxy",
   "Description": "Web proxy FQDN or IP",
   "Value": {
    "Ref": "webProxyFQDN"
   }
  }
 },
 "Parameters": {
  "Vpc": {
   "ConstraintDescription": "This must be an existing VPC within the working region.",
   "Type": "AWS::EC2::VPC::Id"
  },
  "alienRangeCIDR": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range representing the alien range (VS subnet)",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "allowPhoneHome": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "No",
   "Description": "This deployment can send anonymous device statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "allowUsageAnalytics": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "No",
   "Description": "This deployment can send anonymous template statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "application": {
   "Default": "f5app",
   "Description": "Name of the Application Tag",
   "Type": "String"
  },
  "bigIpModules": {
   "Default": "ltm:nominal",
   "Description": "Comma separated list of modules and levels to provision, for example: ltm:nominal,asm:nominal",
   "Type": "String"
  },
  "bigIqAddress": {
   "ConstraintDescription": "Verify the private IP address of the BIG-IQ device that contains the pool of licenses",
   "Description": "Private IP address of the BIG-IQ device that contains the pool of BIG-IP licenses",
   "MaxLength": "255",
   "MinLength": "1",
   "Type": "String"
  },
  "bigIqLicensePoolName": {
   "ConstraintDescription": "Verify the Name of BIG-IQ License Pool",
   "Description": "Name of the pool on BIG-IQ that contains the BIG-IP licenses",
   "MaxLength": "255",
   "MinLength": "1",
   "Type": "String"
  },
  "bigIqLicenseSkuKeyword1": {
   "ConstraintDescription": "Verify the BIG-IQ license filter to use for sku keyword 1",
   "Default": "OPTIONAL",
   "Description": "The BIG-IQ license filter (based on SKU keyword) you want to use for licensing the BIG-IPs from the BIG-IQ, for example LTM, BR, BT, ASM or LTMASM. Note: This is only required when licensing with an ELA/subscription (utility) pool on the BIG-IQ, if not using this pool type leave the default of OPTIONAL.",
   "MaxLength": "255",
   "MinLength": "1",
   "Type": "String"
  },
  "bigIqLicenseSkuKeyword2": {
   "ConstraintDescription": "Verify the BIG-IQ license filter to use for sku keyword 2",
   "Default": "OPTIONAL",
   "Description": "The BIG-IQ license filter (based on SKU keyword2) you want to use for licensing the BIG-IPs from the BIG-IQ, for example 25M, 200M, 1G, 3G, 5G, 10G. Note: This is only required when licensing with an ELA/subscription (utility) pool on the BIG-IQ, if not using this pool type leave the default of OPTIONAL.",
   "MaxLength": "255",
   "MinLength": "1",
   "Type": "String"
  },
  "bigIqLicenseTenant": {
   "ConstraintDescription": "Verify the BIGIQ Licenses tenant value",
   "Default": "OPTIONAL",
   "Description": "The BIG-IQ license tenant to use during BIG-IP licensing via BIG-IQ. Note: This is only required when licensing with an ELA/subscription (utility) pool on the BIG-IQ, if not using this pool type leave the default of OPTIONAL.",
   "MaxLength": "255",
   "MinLength": "1",
   "Type": "String"
  },
  "bigIqLicenseUnitOfMeasure": {
   "ConstraintDescription": "Verify the BIG-IQ License Unit Of Measure",
   "Default": "OPTIONAL",
   "Description": "The BIG-IQ license unit of measure to use during BIG-IP licensing via BIG-IQ, for example yearly, monthly, daily or hourly. Note: This is only required when licensing with an ELA/subscription (utility) pool on the BIG-IQ, if not using this pool type leave the default of OPTIONAL.",
   "MaxLength": "255",
   "MinLength": "1",
   "Type": "String"
  },
  "bigIqPasswordS3Arn": {
   "ConstraintDescription": "Verify the S3 ARN of BIG-IQ Password file",
   "Description": "S3 ARN of the BIG-IQ Password file. e.g. arn:aws:s3:::bucket_name/full_path_to_file for public regions. For GovCloud (US) region, start with arn:aws-us-gov:s3. For China region, start with arn:aws-cn:s3.",
   "MaxLength": "255",
   "MinLength": "1",
   "Type": "String"
  },
  "bigIqUsername": {
   "ConstraintDescription": "Verify the BIG-IQ user with privileges to license BIG-IP. Can be Admin, Device Manager, or Licensing Manager",
   "Description": "BIG-IQ user with privileges to license BIG-IP. Must be 'Admin', 'Device Manager', or 'Licensing Manager'",
   "MaxLength": "255",
   "MinLength": "1",
   "Type": "String"
  },
  "configmanagement": {
   "AllowedValues": [
     "none",
     "manual",
     "ansible",
     "puppet"
   ],
   "Default": "ansible",
   "ConstraintDescription": "Must be a valid ConfigManagement",
   "Description": "Name of the ConfigManagement Tag",
   "Type": "String"
  },
  "customImageId": {
   "ConstraintDescription": "Must be a valid AMI Id",
   "Default": "OPTIONAL",
   "Description": "If you would like to deploy using a custom BIG-IP image, provide the AMI Id.  **Note**: Unless specifically required, leave the default of **OPTIONAL**",
   "MaxLength": 255,
   "MinLength": 1,
   "Type": "String"
  },
  "declarationUrl": {
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "Default": "none",
   "Description": "URL for the AS3 declaration JSON file to be deployed. Leave as **none** to deploy without a service configuration.",
   "Type": "String"
  },
  "deploymentName": {
   "Default": "example",
   "Description": "Name the template uses to create object names",
   "MaxLength": 25,
   "Type": "String"
  },
  "environment": {
   "AllowedValues": [
     "prd",
     "nprd",
     "sdbx"
   ],
   "Default": "prd",
   "ConstraintDescription": "Must be a valid environment",
   "Description": "Name of the Environment Tag",
   "Type": "String"
  },
  "imageName": {
   "AllowedValues": [
    "AllOneBootLocation",
    "AllTwoBootLocations",
    "LTMOneBootLocation",
    "LTMTwoBootLocations"
   ],
   "ConstraintDescription": "Must be a valid F5 BIG-IP VE image type",
   "Default": "AllTwoBootLocations",
   "Description": "Image names starting with All have all BIG-IP modules available. Image names starting with LTM have only the LTM module available.  Use Two Boot Locations if you expect to upgrade the BIG-IP VE in the future (the Two Boot Location options are only applicable to BIG-IP v13.1.1 or later).",
   "Type": "String"
  },
  "instanceType": {
   "AllowedValues": [
    "m5.xlarge",
    "m5.4xlarge",
    "m5.large",
    "m5.12xlarge",
    "m4.xlarge",
    "m4.large",
    "m4.4xlarge",
    "m4.2xlarge",
    "m4.16xlarge",
    "m4.10xlarge",
    "cc2.8xlarge",
    "c5.xlarge",
    "c5.large",
    "c5.4xlarge",
    "c5.9xlarge",
    "c4.xlarge",
    "c4.8xlarge",
    "c4.4xlarge",
    "c4.2xlarge",
    "c5n.2xlarge",
    "c5n.4xlarge"
   ],
   "ConstraintDescription": "Must be a valid EC2 instance type for BIG-IP",
   "Default": "m5.xlarge",
   "Description": "Size of the F5 BIG-IP Virtual Instance",
   "Type": "String"
  },
  "managementSubnetAz1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Management Subnet ID",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "managementSubnetAz2": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Management Subnet ID",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "monitoringlevel": {
   "AllowedValues": [
     "Built-in",
     "Native integration with DataDog",
     "Integration with other external tools"
   ],
   "Default": "Built-in",
   "ConstraintDescription": "Must be a valid Monitoring Level",
   "Description": "Name of the MonitoringLevel Tag",
   "Type": "String"
  },
  "ntpServer": {
   "Default": "0.pool.ntp.org",
   "Description": "NTP server for this implementation",
   "Type": "String"
  },
  "os": {
   "AllowedValues": [
     "BIG-IP 16.1.3",
     "BIG-IP 16.1.2",
     "BIG-IP 16.1.1",
     "BIG-IP 16.1.0",
     "BIG-IP 16.0.1",
     "BIG-IP 16.0.0",
     "BIG-IP 15.1.3",
     "BIG-IP 15.1.2",
     "BIG-IP 15.1.1",
     "BIG-IP 15.1.0",
     "BIG-IP 15.0.1",
     "BIG-IP 15.0.0",
     "BIG-IP 14.1.3",
     "BIG-IP 14.1.2",
     "BIG-IP 14.1.0",
     "BIG-IP 14.0.1",
     "BIG-IP 14.0.0"
   ],
   "Default": "BIG-IP 14.1.2",
   "ConstraintDescription": "Must be a valid OS (BIG-IP Version)",
   "Description": "Name of the OS Tag",
   "Type": "String"
  },
  "platform": {
   "Default": "Big-IP",
   "Description": "Name of the Platform Tag",
   "Type": "String"
  },
  "powerpolicy": {
   "AllowedValues": [
     "24-24/7-7",
     "24-24/7-5",
     "8-18/7-7",
     "8-18/5-7"
   ],
   "Default": "24-24/7-7",
   "ConstraintDescription": "Must be a valid PowerPolicy.",
   "Description": "Name of the PowerPolicy Tag",
   "Type": "String"
  },
  "provisionPublicIP": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "No",
   "Description": "Whether or not to provision Public IP Addresses for the BIG-IP Network Interfaces. By Default no Public IP addresses are provisioned.",
   "Type": "String"
  },
  "restrictedSrcAddress": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range used to SSH and access managment GUI on the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "restrictedSrcAddressApp": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range that can be used to access web traffic (80/443) to the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "sla": {
   "AllowedValues": [
     "24-24/7-7",
     "24-24/7-5",
     "8-18/5-7"
   ],
   "Default": "24-24/7-7",
   "ConstraintDescription": "Must be a valid SLA",
   "Description": "Name of the SLA Tag",
   "Type": "String"
  },
  "sshKey": {
   "Description": "EC2 KeyPair to enable SSH access to the BIG-IP instance",
   "Type": "AWS::EC2::KeyPair::KeyName"
  },
  "subnet1Az1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Public or External subnet",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "subnet1Az2": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Public or External subnet",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "timezone": {
   "Default": "UTC",
   "Description": "Enter the Olson timezone string from /usr/share/zoneinfo. The default is 'UTC'. See the TZ column here (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for legal values. For example, 'US/Eastern'.",
   "Type": "String"
  },
  "webProxyFQDN": {
   "Default": "OPTIONAL",
   "Description": "The Web Proxy FQDN or IP address to use. If not using any Web Proxy leave the default of OPTIONAL.",
   "Type": "String"
  }
 },
 "Resources": {
  "Bigip1Instance": {
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "config": {
      "commands": {
       "000-disable-1nicautoconfig": {
        "command": "/usr/bin/setdb provision.1nicautoconfig disable"
       },
       "001-rest-provision-extramb": {
        "command": "/usr/bin/setdb provision.extramb 500"
       },
       "002-rest-use-extramb": {
        "command": "/usr/bin/setdb restjavad.useextramb true"
       },
       "005-set-webproxy-variables": {
        "command": {
         "Fn::If": [
          "noWebProxy",
          {
           "Fn::Join": [
            " ",
            [
             "mkdir -p /var/log/cloud/aws;",
             "nohup /config/set-webproxy-variables.sh",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          },
          {
           "Fn::Join": [
            " ",
            [
             "mkdir -p /var/log/cloud/aws;",
             "nohup /config/set-webproxy-variables.sh",
             "&>> /var/log/cloud/aws/install.log < /dev/null &",
             "source /etc/profile"
            ]
           ]
          }
         ]
        } 
       },
       "010-install-libs": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "mkdir -p /var/log/cloud/aws;",
           "nohup /config/installCloudLibs.sh",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "015-install-awscliv2": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/install-awscliv2.sh",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "020-generate-password": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --signal PASSWORD_CREATED",
           " --file f5-rest-node",
           " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
           " --log-level silly",
           " -o /var/log/cloud/aws/generatePassword.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "030-create-admin-user": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --wait-for PASSWORD_CREATED",
           " --signal ADMIN_CREATED",
           " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
           " --cl-args '--user admin",
           " --password-file /config/cloud/aws/.adminPassword",
           " --password-encrypted",
           "'",
           " --log-level silly",
           " -o /var/log/cloud/aws/createUser.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "040-network-config": {
        "command": {
         "Fn::Join": [
          "",
          [
           "GATEWAY_MAC=`ifconfig eth1 | egrep ether | awk '{print tolower($2)}'`; ",
           "GATEWAY_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`; ",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}; ",
           "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}; ",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",
           "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`; ",
           "MGMT_GATEWAY=`/config/cloud/aws/getManagementGateway.sh eth0`; ",
           "nohup /config/waitThenRun.sh ",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
           "--host localhost ",
           "--user admin ",
           "--password-url file:///config/cloud/aws/.adminPassword ",
           "--password-encrypted ",
           "-o /var/log/cloud/aws/network.log ",
           "--log-level silly ",
           "--wait-for ADMIN_CREATED ",
           "--signal NETWORK_CONFIG_DONE ",
           "--vlan name:external,nic:1.1 ",
           "--default-gw ${GATEWAY} ",
           "--mgmt-route name:dns_route,gw:${MGMT_GATEWAY},network:${NAME_SERVER}/32 ",
           "--self-ip 'name:external-self,address:",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "/'${GATEWAY_PREFIX}',vlan:external,allow:tcp:4353 udp:1026' ",
           "--local-only ",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "050-onboard-BIG-IP": {
        "command": {
         "Fn::If": [
          "optin",
          {
           "Fn::Join": [
            " ",
            [
             "REGION=\"",
             {
              "Ref": "AWS::Region"
             },
             "\";",
             "DEPLOYMENTID=`echo \"",
             {
              "Ref": "AWS::StackId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "CUSTOMERID=`echo \"",
             {
              "Ref": "AWS::AccountId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--install-ilx-package file:///config/cloud/f5-appsvcs-3.20.0-3.noarch.rpm --install-ilx-package file:///config/cloud/f5-cloud-failover-1.5.0-0.noarch.rpm",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--user admin",
             "--password-url file:///config/cloud/aws/.adminPassword",
             "--password-encrypted",
             "--hostname `curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "--license-pool --cloud aws",
             "--big-iq-host",
             {
              "Ref": "bigIqAddress"
             },
             "--big-iq-user",
             {
              "Ref": "bigIqUsername"
             },
             "--license-pool-name",
             {
              "Ref": "bigIqLicensePoolName"
             },
             "--big-iq-password-uri",
             {
              "Ref": "bigIqPasswordS3Arn"
             },
             "--tenant ",
             {
              "Fn::If": [
               "noTenant",
               {
                "Ref": "AWS::NoValue"
               },
               {
                "Ref": "bigIqLicenseTenant"
               }
              ]
             },
             "--unit-of-measure",
             {
              "Fn::If": [
               "noUnitOfMeasure",
               {
                "Ref": "AWS::NoValue"
               },
               {
                "Ref": "bigIqLicenseUnitOfMeasure"
               }
              ]
             },
             "--sku-keyword-1",
             {
              "Fn::If": [
               "noSkuKeyword1",
               {
                "Ref": "AWS::NoValue"
               },
               {
                "Ref": "bigIqLicenseSkuKeyword1"
               }
              ]
             },
             "--sku-keyword-2 ",
             {
              "Fn::If": [
               "noSkuKeyword2",
               {
                "Ref": "AWS::NoValue"
               },
               {
                "Ref": "bigIqLicenseSkuKeyword2"
               }
              ]
             },
             "--metrics \"cloudName:aws,region:${REGION},bigIpVersion:15.1.0.4-0.0.6,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-existing-stack-across-az-cluster-bigiq-2nic-bigip.template,templateVersion:5.7.1,licenseType:bigiq\"",
             "-d tm.tcpudptxchecksum:software-only -d liveupdate.autodownload:disable",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          },
          {
           "Fn::Join": [
            " ",
            [
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--install-ilx-package file:///config/cloud/f5-appsvcs-3.20.0-3.noarch.rpm --install-ilx-package file:///config/cloud/f5-cloud-failover-1.5.0-0.noarch.rpm",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--user admin",
             "--password-url file:///config/cloud/aws/.adminPassword",
             "--password-encrypted",
             "--hostname `curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "--license-pool --cloud aws",
             "--big-iq-host",
             {
              "Ref": "bigIqAddress"
             },
             "--big-iq-user",
             {
              "Ref": "bigIqUsername"
             },
             "--license-pool-name",
             {
              "Ref": "bigIqLicensePoolName"
             },
             "--big-iq-password-uri",
             {
              "Ref": "bigIqPasswordS3Arn"
             },
             "--tenant ",
             {
              "Fn::If": [
               "noTenant",
               {
                "Ref": "AWS::NoValue"
               },
               {
                "Ref": "bigIqLicenseTenant"
               }
              ]
             },
             "--unit-of-measure",
             {
              "Fn::If": [
               "noUnitOfMeasure",
               {
                "Ref": "AWS::NoValue"
               },
               {
                "Ref": "bigIqLicenseUnitOfMeasure"
               }
              ]
             },
             "--sku-keyword-1",
             {
              "Fn::If": [
               "noSkuKeyword1",
               {
                "Ref": "AWS::NoValue"
               },
               {
                "Ref": "bigIqLicenseSkuKeyword1"
               }
              ]
             },
             "--sku-keyword-2 ",
             {
              "Fn::If": [
               "noSkuKeyword2",
               {
                "Ref": "AWS::NoValue"
               },
               {
                "Ref": "bigIqLicenseSkuKeyword2"
               }
              ]
             },
             "-d tm.tcpudptxchecksum:software-only -d liveupdate.autodownload:disable",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         ]
        }
       },
       "055-custom-config": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/custom-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/custom-config.log",
           "--log-level silly",
           "--wait-for ONBOARD_DONE",
           "--signal CUSTOM_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "060-cluster": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "HOSTNAME=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`;",
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/cluster.js",
           "--wait-for CUSTOM_CONFIG_DONE",
           "--signal CLUSTER_DONE",
           "-o /var/log/cloud/aws/cluster.log",
           "--log-level silly",
           "--host localhost",
           "--user admin",
           "--password-url file:///config/cloud/aws/.adminPassword",
           "--password-encrypted",
           "--cloud aws",
           "--provider-options 's3Bucket:",
           {
            "Ref": "S3Bucket"
           },
           "'",
           "--primary",
           "--config-sync-ip",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "--create-group",
           "--device-group across_az_failover_group",
           "--sync-type sync-failover",
           "--network-failover",
           "--device ${HOSTNAME}",
           "--auto-sync",
           "--save-on-auto-sync",
           "--asm-sync",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "065-cfe": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/cfe-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/cfe-config.log",
           "--log-level silly",
           "--wait-for CLUSTER_DONE",
           "--signal CFE_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "070-verify-deployment": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --wait-for CFE_CONFIG_DONE",
           " --signal DEPLOYMENT_VERIFIED",
           " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs-aws/scripts/verifyDeploymentCompletion.js",
           " --cl-args '--user admin",
           " --password-url file:///config/cloud/aws/.adminPassword",
           " --password-encrypted true",
           " --host localhost",
           " --port 443",
           " --solution failover",
           " --log-level silly",
           " --instances-count 2",
           "'",
           " --log-level silly",
           " -o /var/log/cloud/aws/verifyDeploymentCompletion.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "075-rm-password": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/rm-password.sh",
           "-o /var/log/cloud/aws/rm-password.log",
           "--log-level silly",
           "--wait-for DEPLOYMENT_VERIFIED",
           "--signal PASSWORD_REMOVED",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       }
      },
      "files": {
       "/config/cloud/aws/cfe-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "cfe_file_loc=\"/config/cloud/cfe_config.json\"\n",
           "cfe_response_code=$(/usr/bin/curl -skvvu ${adminUsername}:$passwd -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" https://localhost:${managementGuiPort}/mgmt/shared/cloud-failover/declare -d @$cfe_file_loc -o /dev/null)\n",
           "if [[ $cfe_response_code == 200 || $cfe_response_code == 502 ]]; then\n",
           "    echo \"Deployment of CFE application succeeded.\"\n",
           "    cfe_deployed=\"yes\"\n",
           "else\n",
           "    echo \"Failed to deploy CFE application; continuing...\"\n",
           "fi\n",
           "#Disable built-in script\nmount -o remount,rw /usr\n",
           "mv /usr/libexec/aws/aws-failover-tgactive.sh /usr/libexec/aws/aws-failover-tgactive.sh.disabled\n",
           "mv /usr/libexec/aws/aws-failover-tgrefresh.sh /usr/libexec/aws/aws-failover-tgrefresh.sh.disabled\n",
           "mount -o remount,ro /usr\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/custom-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "EXTIP='",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "'\n",
           "HOSTNAME=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "declare -a tmsh=()\n",
           "echo 'starting custom-config.sh'\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "if [[ $allowPhoneHome == \"No\" ]]; then\n",
           "    tmsh+=(\n",
           "    \"tmsh modify sys software update auto-phonehome disabled\")\n",
           "fi\n",
           "tmsh+=(\n",
           "\"tmsh modify sys db dhclient.mgmt { value disable }\"\n",
           "\"tmsh modify cm device ${HOSTNAME} unicast-address { { effective-ip ${EXTIP} effective-port 1026 ip ${EXTIP} } }\"\n",
           "\"tmsh save /sys config\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
           "    if $CMD;then\n",
           "        echo \"command $CMD successfully executed.\"\n",
           "    else\n",
           "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "    fi\n",
           "done\n",
           "date\n",
           "### START CUSTOM CONFIGURATION\n",
           "deployed=\"no\"\n",
           "url_regex=\"(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n",
           "file_loc=\"/config/cloud/custom_config\"\n",
           "if [[ $declarationUrl =~ $url_regex ]]; then\n",
           "  response_code=$(/usr/bin/curl -sk -w \"%{http_code}\" $declarationUrl -o $file_loc)\n",
           "  if [[ $response_code == 200 ]]; then\n",
           "    echo \"Custom config download complete; checking for valid JSON.\"\n",
           "    cat $file_loc | jq .class\n",
           "    if [[ $? == 0 ]]; then\n",
           "      response_code=$(/usr/bin/curl -skvvu ${adminUsername}:$passwd -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" -H \"Expect:\" https://localhost:${managementGuiPort}/mgmt/shared/appsvcs/declare -d @$file_loc -o /dev/null)\n",
           "      if [[ $response_code == 200 || $response_code == 502 ]]; then\n",
           "        echo \"Deployment of custom application succeeded.\"\n",
           "        deployed=\"yes\"\n",
           "      else\n",
           "         echo \"Failed to deploy custom application; continuing...\"\n",
           "      fi\n",
           "    else\n",
           "      echo \"Custom config was not valid JSON, continuing...\"\n",
           "    fi\n",
           "  else\n",
           "    echo \"Failed to download custom config; continuing...\"\n",
           "  fi\n",
           "else\n",
           "  echo \"Custom config was not a URL, continuing...\"\n",
           "fi\n",
           "### END CUSTOM CONFIGURATION\n",
           "### START OUR CUSTOM CONFIGURATION -- A.Molari/WIRD SA -- created: 17/09/2020\n",
           "echo \"Starting our own customization...\"\n",
           "echo \"Setting sshd configuration...\"\n",
           "tmsh modify /sys sshd { inactivity-timeout 300 log-level debug }\n",
           "echo \"Setting sshd banner...\"\n",
           "tmsh modify /sys sshd include \"Banner /config/ssh/ssh_custombanner\"\n",
           "(\n",
           "cat << EOT > /config/ssh/ssh_custombanner\n",
           "\n",
           "WARNING\n",
           "This system is for the use of Richemont authorized users only.\n",
           "If you are not authorized, leave this system immediately.\n",
           "\n",
           "EOT\n",
           ")\n",  
           "  echo \"Setting UI is24hour...\"\n",
           "  tmsh modify /sys db ui.is24hour { value true }\n",
           "  echo \"Setting sys global-settings...\"\n",
           "  tmsh modify /sys global-settings quiet-boot enabled gui-audit enabled console-inactivity-timeout 300 gui-setup disabled\n",
           "  echo \"Setting sys global-settings gui-security-banner...\"\n",
           "  tmsh modify /sys global-settings gui-security-banner enabled gui-security-banner-text \"`echo -e \"WARNING\n\nThis system is for the use of Richemont authorized users only.\nIf you are not authorized, leave this   system immediately.\n\"`\"\n",
           "  echo \"Setting auto-check and auto-phonehome to disable...\"\n",
           "  tmsh modify /sys software update auto-check disabled\n",
           "  tmsh modify /sys software update auto-phonehome disabled\n",
           "echo \"Starting our own customization on any instance...\"\n",
           "echo \"Setting UI advisory...\"\n",
           "if [[ $environment == \"prd\" ]]; then \n",
           "  echo \"prd environment: setting UI advisory to color=red...\"\n",
           "  tmsh modify /sys db ui.advisory.color { value red }\n",
           "elif [[ $environment == \"nprd\" ]]; then \n",
           "  echo \"nprd environment: setting UI advisory to color=orange...\"\n",
           "  tmsh modify /sys db ui.advisory.color { value orange }\n",
           "else\n",
           "  echo \"sandbox environment: setting UI advisory to color=yellow...\"\n",
           "  tmsh modify /sys db ui.advisory.color { value yellow }\n",
           "fi\n",
           "echo \"Enabling UI advisory...\"\n",
           "tmsh modify /sys db ui.advisory.enabled { value true }\n",
           "echo \"Creating ssh motd/ui advisory script /config/banner-select.sh ...\"\n",
           "echo \"Creating ui advisory...\"\n",
           "tmsh modify /sys db ui.advisory.text value \"DeploymentName: ${deploymentName} - EC2-ID: `curl -s --connect-timeout 1 169.254.169.254/latest/meta-data/instance-id` - `curl -s --connect-timeout 1 169.254.169.254/latest/meta-data/placement/availability-zone` - BIGIP1\"\n",
           "cat << EOT > /etc/motd\n",
           "\n",
           "\n",
           "    * * * * * * * * * * * * *:  W A R N I N G  :* * * * * * * * * * * * * *\n",
           "    *                                                                     *\n",
           "    *                        THIS NODE IS BIGIP1                          *\n",
           "    *                                                                     *\n",
           "    * * * * * * * * * * * * *:  W A R N I N G  :* * * * * * * * * * * * * *\n",
           "    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
           "    *\n",
           "    *  Version: `tmsh show sys version | grep \" .Version\" | awk '{print $2}'`\n",
           "    *  Build:   `tmsh show sys version | grep \" .Build\" | awk '{print $2}'`\n",
           "    *\n",
           "    *\n",
           "    *  Mgmt Private IP Address: `curl -s --connect-timeout 1 169.254.169.254/latest/meta-data/local-ipv4`\n",
           "    *  AWS AZ: `curl -s --connect-timeout 1 169.254.169.254/latest/meta-data/placement/availability-zone`\n",
           "    *  Instance Type: `curl -s --connect-timeout 1 169.254.169.254/latest/meta-data/instance-type`\n",
           "    *  Instance-Id: `curl -s --connect-timeout 1 169.254.169.254/latest/meta-data/instance-id`\n",
           "    *\n",
           "    *  Environment: ${environment}\n",
           "    *  DeploymentName: ${deploymentName}\n",
           "    *\n",
           "    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n\n",
           "EOT\n",
           "\n",
           "echo \"End of our own customization.\"\n",
           "### END OUR CUSTOM CONFIGURATION\n",
           "(crontab -l 2>/dev/null; echo '30 23 * * * /config/cloud/aws/run_failover_backup.sh 5') | crontab -\n",
           "tmsh save /sys config\n",
           "date\n",
           "echo 'custom-config.sh complete'\n"        
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getManagementGateway.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "GATEWAY_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "GATEWAY_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`",
           "echo $GATEWAY"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getNameServer.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "VPC_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
           "VPC_NET=${VPC_CIDR_BLOCK%/*}",
           "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
           "echo $NAME_SERVER"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/onboard_config_vars": {
        "content": {
         "Fn::Join": [
          "",
          [
           "",
           "#!/bin/bash\n",
           "# Generated from 5.7.1\n",
           "hostname=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
           "region='",
           {
            "Ref": "AWS::Region"
           },
           "'\n",
           "deploymentName='",
           {
            "Ref": "deploymentName"
           },
           "'\n",
           "environment='",
           {
            "Ref": "environment"
           },
           "'\n",
           "adminUsername='admin'\n",
           "managementGuiPort='443'\n",
           "timezone='",
           {
            "Ref": "timezone"
           },
           "'\n",
           "ntpServer='",
           {
            "Ref": "ntpServer"
           },
           "'\n",
           "declarationUrl='",
           {
            "Ref": "declarationUrl"
           },
           "'\n",
           "allowPhoneHome='",
           {
            "Ref": "allowPhoneHome"
           },
           "'\n",
           "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/rm-password.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "date\n",
           "echo 'starting rm-password.sh'\n",
           "declare -a tmsh=()\n",
           "tmsh+=(\"rm /config/cloud/aws/.adminPassword\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  if $CMD;then\n",
           "      echo \"command $CMD successfully executed.\"\n",
           "  else\n",
           "      error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "  fi\n",
           "done\n",
           "date\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/cfe_config.json": {
        "content": {
         "Fn::Join": [
          "",
          [
           "{\n",
           "    \"class\":\"Cloud_Failover\",\n",
           "    \"controls\":{\n",
           "      \"class\":\"Controls\",\n",
           "      \"logLevel\":\"silly\"\n",
           "    },\n",
           "    \"environment\":\"aws\",\n",
           "    \"externalStorage\":{\n",
           "      \"scopingTags\":{\n",
           "      \"failover/f5_cluster\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      }\n",
           "    },\n",
           "    \"failoverRoutes\":{\n",
           "      \"scopingTags\":{\n",
           "      \"failover/f5_cluster\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      },\n",
           "      \"scopingAddressRanges\":[\n",
           "           {\n",
           "             \"range\":\"",
           {
            "Ref": "alienRangeCIDR"
           },
           "\"\n",
           "           }\n",
           "       ],\n",
           "      \"defaultNextHopAddresses\":{\n",
           "        \"discoveryType\":\"static\",\n",
           "        \"items\":[\n",
           "              \"",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "\",\n",
           "              \"",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az2Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "\"\n",
           "         ]\n",
           "       }\n",
           "     }\n",
           "}"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/run_failover_backup.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "\n",
           "LOGFILE=\"/var/log/cloud/aws/run_failover_backup.log\"\n",
           "exec 1>>${LOGFILE} 2>&1\n",
           "LOCAL_UCS_DIR=\"/var/local/ucs\"\n",
           "nameUCS=\"${deploymentName}_BIGIP1-${HOSTNAME}_`date +%Y%m%d_%H%M`.ucs\"\n",
           "S3_BACKUP_DIR=\"/backup\"\n",
           "\n",
           "case \"$1\" in\n",
           "    \"\")\n",
           "       echo \"[`date +%Y-%m-%dT%H:%M:%S`] Missing argument. Provide the number of UCS files to keep [1-7]\"\n",
           "       exit 1;;\n",
           "    [1-7])\n",
           "       echo ;;\n",
           "    *)\n",
           "       echo \"[`date +%Y-%m-%dT%H:%M:%S`] Invalid argument. Provide the number of UCS files to keep [1-7]\"\n",
           "       exit 1;;\n",
           "esac\n",
           "\n",
           "KEEP_NR_FILES=$1\n",
           "\n",
           "echo \"[`date +%Y-%m-%dT%H:%M:%S`] starting backup...\"\n",
           "tmsh save sys ucs ${LOCAL_UCS_DIR}/${nameUCS}\n",
           "echo \"[`date +%Y-%m-%dT%H:%M:%S`] ucs locally saved, verifying integrity...\"\n",
           "gzip -t ${LOCAL_UCS_DIR}/${nameUCS}\n",
           "if [ $? != 0 ]; then\n",
           "   echo \"[`date +%Y-%m-%dT%H:%M:%S`] UCS file ${nameUCS} is corrupted! Exiting...\"\n",
           "   exit 1\n",
           "fi\n",
           "echo \"[`date +%Y-%m-%dT%H:%M:%S`] start pruning.. keep the last ${KEEP_NR_FILES} ucs archives\"\n",
           "ls -t1d ${LOCAL_UCS_DIR}/f5*.ucs | tail -n +$((KEEP_NR_FILES + 1)) | xargs rm -f\n",
           "echo \"[`date +%Y-%m-%dT%H:%M:%S`] sync ${LOCAL_UCS_DIR} with s3 bucket (dir=${S3_BACKUP_DIR})\"\n",
           "/usr/local/bin/aws s3 sync --delete ${LOCAL_UCS_DIR} s3://",
           {
            "Ref": "S3Bucket"
           },
           "${S3_BACKUP_DIR} --exclude '*' --include 'f5*.ucs' --delete\n",
           "if [ $? != 0 ]; then\n",
           "   echo \"[`date +%Y-%m-%dT%H:%M:%S`]aws s3 sync error!\"\n",
           "   exit 1\n",
           "fi\n",
           "echo \"[`date +%Y-%m-%dT%H:%M:%S`] backup successfully executed (file=${nameUCS})\"\n",
           "echo \"--------------\"\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/f5-appsvcs-3.20.0-3.noarch.rpm": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-appsvcs-extension/v3.20.0/f5-appsvcs-3.20.0-3.noarch.rpm"
       },
       "/config/cloud/f5-cloud-failover-1.5.0-0.noarch.rpm": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "https://github.com/F5Networks/f5-cloud-failover-extension/releases/download/v1.5.0/f5-cloud-failover-1.5.0-0.noarch.rpm"
       },
       "/config/cloud/f5-cloud-libs-aws.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.9.0/f5-cloud-libs-aws.tar.gz"
       },
       "/config/cloud/f5-cloud-libs.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.22.0/f5-cloud-libs.tar.gz"
       },
       "/config/installCloudLibs.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "echo about to execute",
           "checks=0",
           "while [ $checks -lt 120 ]; do echo checking mcpd",
           "    tmsh -a show sys mcp-state field-fmt | grep -q running",
           "    if [ $? == 0 ]; then",
           "        echo mcpd ready",
           "        break",
           "    fi",
           "    echo mcpd not ready yet",
           "    let checks=checks+1",
           "    sleep 10",
           "done",
           "echo loading verifyHash script",
           "if ! tmsh load sys config merge file /config/verifyHash; then",
           "    echo cannot validate signature of /config/verifyHash",
           "    exit",
           "fi",
           "echo loaded verifyHash",
           "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/config/cloud/f5-appsvcs-3.20.0-3.noarch.rpm\"  \"/config/cloud/f5-cloud-failover-1.5.0-0.noarch.rpm\")",
           "for fileToVerify in \"${filesToVerify[@]}\"",
           "do",
           "    echo verifying \"$fileToVerify\"",
           "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
           "        echo \"$fileToVerify\" is not valid",
           "        exit 1",
           "    fi",
           "    echo verified \"$fileToVerify\"",
           "done",
           "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
           "echo expanding f5-cloud-libs.tar.gz",
           "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo installing dependencies",
           "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo cloud libs install complete",
           "touch /config/cloud/cloudLibsReady"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/set-webproxy-variables.sh": {
        "content": {
         "Fn::If": [
          "noWebProxy",
          {
           "Fn::Join": [
            "",
            [
             "#!/bin/bash\n",
             "echo \"no web proxy is configured, doing nothing...\"\n"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "#!/bin/bash\n",
             "echo setting web proxy variables in profile\n",
             { "Fn::Sub": "echo \"export HTTP_PROXY=http://${webProxyFQDN}:80\" >> /etc/profile.d/use_proxy.sh\n" },
             { "Fn::Sub": "echo \"export HTTPS_PROXY=http://${webProxyFQDN}:80\" >> /etc/profile.d/use_proxy.sh\n" },
             { "Fn::Sub": "echo \"export http_proxy=http://${webProxyFQDN}:80\" >> /etc/profile.d/use_proxy.sh\n" },
             { "Fn::Sub": "echo \"export https_proxy=http://${webProxyFQDN}:80\" >> /etc/profile.d/use_proxy.sh\n" },
             { "Fn::Sub": "echo \"export NO_PROXY=169.254.169.254,localhost,127.0.0.1,s3.${AWS::Region}.amazonaws.com\" >> /etc/profile.d/use_proxy.sh\n" },
             { "Fn::Sub": "echo \"export no_proxy=169.254.169.254,localhost,127.0.0.1,s3.${AWS::Region}.amazonaws.com\" >> /etc/profile.d/use_proxy.sh\n" }
            ]
           ]
          }
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/install-awscliv2.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "echo downloading aws cli v2",          
           "curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o /config/cloud/aws/awscliv2.zip",
           "echo installing aws cli v2",
           "unzip -q /config/cloud/aws/awscliv2.zip -d /config/cloud/aws/",
           "echo remount /usr in rw for installation",
           "mount -o remount,rw /usr",
           "/config/cloud/aws/aws/install",
           "if [ $? != 0 ]; then",
           "   echo error installing aws cli",
           "fi",
           "echo remount /usr in ro",
           "mount -o remount,ro /usr",         
           "echo cleanup aws cli v2 installation files",
           "rm -rf /config/cloud/aws/aws"          
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/verifyHash": {
        "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) e688cb153416abc85da081dd09d2dd4fd433c29f197fd927c12afa9e0d44699280b48a2ae93f19361dd0c3cdb72823205ed037ef0a10f7cfbef09f399aa620c8\n            set hashes(f5-cloud-libs-aws.tar.gz) fefa76ffe9e2c36d3b36b12f7c5a51f1fb8265221d000afafd113af07cbda30717bda03b26c9e10c636344a735e7ee59d8de172c6b970bcc24e161cdf01d354f\n            set hashes(f5-cloud-libs-azure.tar.gz) fa0d27d2cd69f965dcdc0dd79bb85baad47686af19a2013db2ee7fb486a0ccbd1072c3a34ef4553c28fe7387665e36557134cf6d4e221f2392f0b11eaf9bcbaf\n            set hashes(f5-cloud-libs-gce.tar.gz) e8f935a70aff0dbd19b8967c4ea35ca8027ff5657d929923aca971394370a269f4cbb960dd506abd34a36d82de0b3442e2f63c079c53cf1f0f023da110309cb6\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963\n            set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n            set hashes(f5-appsvcs-3.5.1-5.noarch.rpm) ba71c6e1c52d0c7077cdb25a58709b8fb7c37b34418a8338bbf67668339676d208c1a4fef4e5470c152aac84020b4ccb8074ce387de24be339711256c0fa78c8\n            set hashes(f5-appsvcs-3.18.0-4.noarch.rpm) e72ee8005a27070ac399ab097e8aa507a72aae4721d7491589cfeb821db3ef86cbc979e796ab319ec727bb51400ccda813c4b9eb4a6b3d1220a396b582f8f400\n            set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d\n            set hashes(f5-cloud-failover-1.5.0-0.noarch.rpm) 33a7e2d047106bcce681757a65240bfacedd48e13567e05fdb23a4b269d266aa5001f81158c3964dc297f0428db31c9df428002898d190285b349c59422a573b\n            set hashes(f5-cloud-failover-1.3.0-0.noarch.rpm) 19681eb33d9f910c913f8180199485eb653b4b5ebeaae0b90a6ce8341d7a22fed8d21815b5ba148c468852d20cc26fad4c4242e50ecc184f1f8770dacced6f6a\n            set hashes(f5-cloud-failover-1.4.0-0.noarch.rpm) 49e9108a070e0c8713aeb7b330662358542e61b7c53a9d45108d37a9bf5246f9e4aaae10cc61064801dcccd20bfd5108347b0f694510e7ece07f96c45ba683b0\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    }\n",
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/waitThenRun.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "while true; do echo \"waiting for cloud libs install to complete\"",
           "    if [ -f /config/cloud/cloudLibsReady ]; then",
           "        break",
           "    else",
           "        sleep 10",
           "    fi",
           "done",
           "\"$@\""
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       }
      }
     }
    }
   },
   "Properties": {
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda",
      "Ebs": {
       "DeleteOnTermination": "true",
       "VolumeSize": "100",
       "VolumeType": "gp2"
      }
     },
     {
      "DeviceName": "/dev/xvdb",
      "NoDevice": {}
     }
    ],
    "IamInstanceProfile": {
     "Ref": "bigipServiceDiscoveryProfile"
    },
    "ImageId": {
     "Fn::If": [
      "noCustomImageId",
      {
       "Fn::FindInMap": [
        "BigipRegionMap",
        {
         "Ref": "AWS::Region"
        },
        {
         "Ref": "imageName"
        }
       ]
      },
      {
       "Ref": "customImageId"
      }
     ]
    },
    "InstanceType": {
     "Ref": "instanceType"
    },
    "KeyName": {
     "Ref": "sshKey"
    },
    "NetworkInterfaces": [
     {
      "Description": "Management Interface",
      "DeviceIndex": "0",
      "NetworkInterfaceId": {
       "Ref": "Bigip1ManagementInterface"
      }
     },
     {
      "Description": "Public or External Interface",
      "DeviceIndex": "1",
      "NetworkInterfaceId": {
       "Ref": "Bigip1subnet1Az1Interface"
      }
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "ConfigManagement",
      "Value": {
       "Ref": "configmanagement"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "MonitoringLevel",
      "Value": {
       "Ref": "monitoringlevel"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Big-IP1: ",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "OS",
      "Value": {
       "Ref": "os"
      }
     },
     {
      "Key": "Platform",
      "Value": {
       "Ref": "platform"
      }
     },
     {
      "Key": "PowerPolicy",
      "Value": {
       "Ref": "powerpolicy"
      }
     },
     {
      "Key": "SLA",
      "Value": {
       "Ref": "sla"
      }
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\n",
        {
         "Fn::If": [
          "noWebProxy",
          "\n",
          {
           "Fn::Join": [
            "",
            [
             { "Fn::Sub": "export HTTPS_PROXY=\"http://${webProxyFQDN}:80\"\n" },
			 { "Fn::Sub": "export HTTP_PROXY=\"http://${webProxyFQDN}:80\"\n" },
             { "Fn::Sub": "export https_proxy=\"http://${webProxyFQDN}:80\"\n" },
             { "Fn::Sub": "export http_proxy=\"http://${webProxyFQDN}:80\"\n" },
             { "Fn::Sub": "export NO_PROXY=\"169.254.169.254,localhost,${Bigip1ManagementInterfacePrivateIp},${Bigip2ManagementInterfacePrivateIp}\"\n" },
             { "Fn::Sub": "export no_proxy=\"169.254.169.254,localhost,${Bigip1ManagementInterfacePrivateIp},${Bigip2ManagementInterfacePrivateIp}\"\n" },
             "DEF_GW=`ip route show default | awk '/default/ {print $3}'`\n",
             "LOGFILE=\"/tmp/trouble.log\"\n",
             "echo \"DEF_GW=$DEF_GW\"\n",
             "for ((i=1;i<=20;i++));\n",
             "do\n",
             "ping -W 1 -c 1 $DEF_GW &> /dev/null\n",
             "if [ $? -eq 0 ]; then\n",
             "echo \"$(date): def gw PING success\" >> $LOGFILE\n",
             "else\n",
             "echo \"$(date): def gw PING failed\" >> $LOGFILE\n",
             "fi\n",
             { "Fn::Sub": "echo \"$(date);$(nslookup -debug -timeout=1 ${webProxyFQDN});$(date)\" >> $LOGFILE\n" },
             "sleep 3\n",
             "done\n"
            ]
           ]
          }
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "/opt/aws/apitools/cfn-init/bin/cfn-init -v -s ",
           {
            "Ref": "AWS::StackId"
           },
           " -r ",
           "Bigip1Instance",
           " --region ",
           {
            "Ref": "AWS::Region"
           },
           "\n"
          ]
         ]
        }
       ]
      ]
     }
    }
   },
   "Type": "AWS::EC2::Instance"
  },
  "Bigip1ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1ManagementEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1ManagementEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip1ManagementInterface"
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip1ManagementInterface": {
   "Properties": {
    "Description": "Management Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipManagementSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "managementSubnetAz1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1VipEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "VIPS",
      "Value": {
       "Fn::Join": [
        ",",
        [
         {
          "Fn::Select": [
           "0",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "SecondaryPrivateIpAddresses"
            ]
           }
          ]
         },
         {
          "Fn::Select": [
           "0",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az2Interface",
             "SecondaryPrivateIpAddresses"
            ]
           }
          ]
         }
        ]
       ]
      }
     },
     {
      "Key": "failover/f5_cluster",
      "Value": {
       "Ref": "AWS::StackName"
      }
     }
    ]
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1VipEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1VipEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip1subnet1Az1Interface"
    },
    "PrivateIpAddress": {
     "Fn::Select": [
      "0",
      {
       "Fn::GetAtt": [
        "Bigip1subnet1Az1Interface",
        "SecondaryPrivateIpAddresses"
       ]
      }
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip1subnet1Az1Interface": {
   "Properties": {
    "Description": "Public External Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipExternalSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "subnet1Az1"
    },
    "Tags": [
     {
      "Key": "failover/f5_cluster",
      "Value": {
       "Ref": "AWS::StackName"
      }
     }
    ]
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1subnet1Az1SelfEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1subnet1Az1SelfEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip1subnet1Az1Interface"
    },
    "PrivateIpAddress": {
     "Fn::GetAtt": [
      "Bigip1subnet1Az1Interface",
      "PrimaryPrivateIpAddress"
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip2Instance": {
   "DependsOn": "Bigip1Instance",
   "CreationPolicy": {
    "ResourceSignal": {
     "Count": "1",
     "Timeout": "PT20M"
    }
   },
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "config": {
      "commands": {
       "000-disable-1nicautoconfig": {
        "command": "/usr/bin/setdb provision.1nicautoconfig disable"
       },
       "001-rest-provision-extramb": {
        "command": "/usr/bin/setdb provision.extramb 500"
       },
       "002-rest-use-extramb": {
        "command": "/usr/bin/setdb restjavad.useextramb true"
       },
	   "005-set-webproxy-variables": {
        "command": {
         "Fn::If": [
          "noWebProxy",
          {
           "Fn::Join": [
            " ",
            [
             "mkdir -p /var/log/cloud/aws;",
             "nohup /config/set-webproxy-variables.sh",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          },
          {
           "Fn::Join": [
            " ",
            [
             "mkdir -p /var/log/cloud/aws;",
             "nohup /config/set-webproxy-variables.sh",
             "&>> /var/log/cloud/aws/install.log < /dev/null &",
             "source /etc/profile"
            ]
           ]
          }
         ]
        } 
       },
       "010-install-libs": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "mkdir -p /var/log/cloud/aws;",
           "nohup /config/installCloudLibs.sh",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "020-generate-password": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --signal PASSWORD_CREATED",
           " --file f5-rest-node",
           " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
           " --log-level silly",
           " -o /var/log/cloud/aws/generatePassword.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "030-create-admin-user": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --wait-for PASSWORD_CREATED",
           " --signal ADMIN_CREATED",
           " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
           " --cl-args '--user admin",
           " --password-file /config/cloud/aws/.adminPassword",
           " --password-encrypted",
           "'",
           " --log-level silly",
           " -o /var/log/cloud/aws/createUser.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "040-network-config": {
        "command": {
         "Fn::Join": [
          "",
          [
           "GATEWAY_MAC=`ifconfig eth1 | egrep ether | awk '{print tolower($2)}'`; ",
           "GATEWAY_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`; ",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}; ",
           "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}; ",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",
           "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`; ",
           "MGMT_GATEWAY=`/config/cloud/aws/getManagementGateway.sh eth0`; ",
           "nohup /config/waitThenRun.sh ",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
           "--host localhost ",
           "--user admin ",
           "--password-url file:///config/cloud/aws/.adminPassword ",
           "--password-encrypted ",
           "-o /var/log/cloud/aws/network.log ",
           "--log-level silly ",
           "--wait-for ADMIN_CREATED ",
           "--signal NETWORK_CONFIG_DONE ",
           "--vlan name:external,nic:1.1 ",
           "--default-gw ${GATEWAY} ",
           "--mgmt-route name:dns_route,gw:${MGMT_GATEWAY},network:${NAME_SERVER}/32 ",
           "--self-ip 'name:external-self,address:",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az2Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "/'${GATEWAY_PREFIX}',vlan:external,allow:tcp:4353 udp:1026' ",
           "--local-only ",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "050-onboard-BIG-IP": {
        "command": {
         "Fn::If": [
          "optin",
          {
           "Fn::Join": [
            " ",
            [
             "REGION=\"",
             {
              "Ref": "AWS::Region"
             },
             "\";",
             "DEPLOYMENTID=`echo \"",
             {
              "Ref": "AWS::StackId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "CUSTOMERID=`echo \"",
             {
              "Ref": "AWS::AccountId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--install-ilx-package file:///config/cloud/f5-appsvcs-3.20.0-3.noarch.rpm --install-ilx-package file:///config/cloud/f5-cloud-failover-1.5.0-0.noarch.rpm",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--user admin",
             "--password-url file:///config/cloud/aws/.adminPassword",
             "--password-encrypted",
             "--hostname `curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "--license-pool --cloud aws",
             "--big-iq-host",
             {
              "Ref": "bigIqAddress"
             },
             "--big-iq-user",
             {
              "Ref": "bigIqUsername"
             },
             "--license-pool-name",
             {
              "Ref": "bigIqLicensePoolName"
             },
             "--big-iq-password-uri",
             {
              "Ref": "bigIqPasswordS3Arn"
             },
             "--tenant ",
             {
              "Fn::If": [
               "noTenant",
               {
                "Ref": "AWS::NoValue"
               },
               {
                "Ref": "bigIqLicenseTenant"
               }
              ]
             },
             "--unit-of-measure",
             {
              "Fn::If": [
               "noUnitOfMeasure",
               {
                "Ref": "AWS::NoValue"
               },
               {
                "Ref": "bigIqLicenseUnitOfMeasure"
               }
              ]
             },
             "--sku-keyword-1",
             {
              "Fn::If": [
               "noSkuKeyword1",
               {
                "Ref": "AWS::NoValue"
               },
               {
                "Ref": "bigIqLicenseSkuKeyword1"
               }
              ]
             },
             "--sku-keyword-2 ",
             {
              "Fn::If": [
               "noSkuKeyword2",
               {
                "Ref": "AWS::NoValue"
               },
               {
                "Ref": "bigIqLicenseSkuKeyword2"
               }
              ]
             },
             "--metrics \"cloudName:aws,region:${REGION},bigIpVersion:15.1.0.4-0.0.6,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-existing-stack-across-az-cluster-bigiq-2nic-bigip.template,templateVersion:5.7.1,licenseType:bigiq\"",
             "-d tm.tcpudptxchecksum:software-only -d liveupdate.autodownload:disable",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          },
          {
           "Fn::Join": [
            " ",
            [
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--install-ilx-package file:///config/cloud/f5-appsvcs-3.20.0-3.noarch.rpm --install-ilx-package file:///config/cloud/f5-cloud-failover-1.5.0-0.noarch.rpm",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--user admin",
             "--password-url file:///config/cloud/aws/.adminPassword",
             "--password-encrypted",
             "--hostname `curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "--license-pool --cloud aws",
             "--big-iq-host",
             {
              "Ref": "bigIqAddress"
             },
             "--big-iq-user",
             {
              "Ref": "bigIqUsername"
             },
             "--license-pool-name",
             {
              "Ref": "bigIqLicensePoolName"
             },
             "--big-iq-password-uri",
             {
              "Ref": "bigIqPasswordS3Arn"
             },
             "--tenant ",
             {
              "Fn::If": [
               "noTenant",
               {
                "Ref": "AWS::NoValue"
               },
               {
                "Ref": "bigIqLicenseTenant"
               }
              ]
             },
             "--unit-of-measure",
             {
              "Fn::If": [
               "noUnitOfMeasure",
               {
                "Ref": "AWS::NoValue"
               },
               {
                "Ref": "bigIqLicenseUnitOfMeasure"
               }
              ]
             },
             "--sku-keyword-1",
             {
              "Fn::If": [
               "noSkuKeyword1",
               {
                "Ref": "AWS::NoValue"
               },
               {
                "Ref": "bigIqLicenseSkuKeyword1"
               }
              ]
             },
             "--sku-keyword-2 ",
             {
              "Fn::If": [
               "noSkuKeyword2",
               {
                "Ref": "AWS::NoValue"
               },
               {
                "Ref": "bigIqLicenseSkuKeyword2"
               }
              ]
             },
             "-d tm.tcpudptxchecksum:software-only -d liveupdate.autodownload:disable",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         ]
        }
       },
       "055-custom-config": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/custom-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/custom-config.log",
           "--log-level silly",
           "--wait-for ONBOARD_DONE",
           "--signal CUSTOM_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "060-cluster": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/cluster.js",
           "--wait-for CUSTOM_CONFIG_DONE",
           "--signal CLUSTER_DONE",
           "-o /var/log/cloud/aws/cluster.log",
           "--log-level silly",
           "--host localhost",
           "--user admin",
           "--password-url file:///config/cloud/aws/.adminPassword",
           "--password-encrypted",
           "--cloud aws",
           "--provider-options 's3Bucket:",
           {
            "Ref": "S3Bucket"
           },
           "'",
           "--config-sync-ip",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az2Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "--join-group",
           "--device-group across_az_failover_group",
           "--remote-host ",
           {
            "Fn::GetAtt": [
             "Bigip1ManagementInterface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "065-cfe": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/cfe-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/cfe-config.log",
           "--log-level silly",
           "--wait-for CLUSTER_DONE",
           "--signal CFE_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "070-verify-deployment": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --wait-for CFE_CONFIG_DONE",
           " --signal DEPLOYMENT_VERIFIED",
           " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs-aws/scripts/verifyDeploymentCompletion.js",
           " --cl-args '--user admin",
           " --password-url file:///config/cloud/aws/.adminPassword",
           " --password-encrypted true",
           " --host localhost",
           " --port 443",
           " --solution failover",
           " --log-level silly",
           " --instances-count 2",
           "'",
           " --log-level silly",
           " -o /var/log/cloud/aws/verifyDeploymentCompletion.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "075-rm-password": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/rm-password.sh",
           "-o /var/log/cloud/aws/rm-password.log",
           "--log-level silly",
           "--wait-for DEPLOYMENT_VERIFIED",
           "--signal PASSWORD_REMOVED",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       }
      },
      "files": {
       "/config/cloud/aws/cfe-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "cfe_file_loc=\"/config/cloud/cfe_config.json\"\n",
           "cfe_response_code=$(/usr/bin/curl -skvvu ${adminUsername}:$passwd -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" https://localhost:${managementGuiPort}/mgmt/shared/cloud-failover/declare -d @$cfe_file_loc -o /dev/null)\n",
           "if [[ $cfe_response_code == 200 || $cfe_response_code == 502 ]]; then\n",
           "    echo \"Deployment of CFE application succeeded.\"\n",
           "    cfe_deployed=\"yes\"\n",
           "else\n",
           "    echo \"Failed to deploy CFE application; continuing...\"\n",
           "fi\n",
           "#Disable built-in script\nmount -o remount,rw /usr\n",
           "mv /usr/libexec/aws/aws-failover-tgactive.sh /usr/libexec/aws/aws-failover-tgactive.sh.disabled\n",
           "mv /usr/libexec/aws/aws-failover-tgrefresh.sh /usr/libexec/aws/aws-failover-tgrefresh.sh.disabled\n",
           "mount -o remount,ro /usr\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/custom-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "EXTIP='",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az2Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "'\n",
           "HOSTNAME=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "declare -a tmsh=()\n",
           "echo 'starting custom-config.sh'\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "if [[ $allowPhoneHome == \"No\" ]]; then\n",
           "    tmsh+=(\n",
           "    \"tmsh modify sys software update auto-phonehome disabled\")\n",
           "fi\n",
           "tmsh+=(\n",
           "\"tmsh modify sys db dhclient.mgmt { value disable }\"\n",
           "\"tmsh modify cm device ${HOSTNAME} unicast-address { { effective-ip ${EXTIP} effective-port 1026 ip ${EXTIP} } }\"\n",
           "\"tmsh save /sys config\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
           "    if $CMD;then\n",
           "        echo \"command $CMD successfully executed.\"\n",
           "    else\n",
           "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "    fi\n",
           "done\n",
           "date\n",
           "### END CUSTOM CONFIGURATION\n",
           "### START OUR CUSTOM CONFIGURATION -- A.Molari/WIRD SA -- created: 17/09/2020\n",
           "echo \"Starting our own customization...\"\n",
           "(\n",
           "cat << EOT > /config/ssh/ssh_custombanner\n",
           "\n",
           "WARNING\n",
           "This system is for the use of Richemont authorized users only.\n",
           "If you are not authorized, leave this system immediately.\n",
           "\n",
           "EOT\n",
           ")\n",  
           "echo \"Setting UI advisory...\"\n",
           "if [[ $environment == \"prd\" ]]; then \n",
           "  echo \"prd environment: setting UI advisory to color=red...\"\n",
           "  tmsh modify /sys db ui.advisory.color { value red }\n",
           "elif [[ $environment == \"nprd\" ]]; then \n",
           "  echo \"nprd environment: setting UI advisory to color=orange...\"\n",
           "  tmsh modify /sys db ui.advisory.color { value orange }\n",
           "else\n",
           "  echo \"sandbox environment: setting UI advisory to color=yellow...\"\n",
           "  tmsh modify /sys db ui.advisory.color { value yellow }\n",
           "fi\n",
           "echo \"Enabling UI advisory...\"\n",
           "tmsh modify /sys db ui.advisory.enabled { value true }\n",
           "echo \"Creating ssh motd/ui advisory script /config/banner-select.sh ...\"\n",
           "echo \"Creating ui advisory...\"\n",
           "tmsh modify /sys db ui.advisory.text value \"DeploymentName: ${deploymentName} - EC2-ID: `curl -s --connect-timeout 1 169.254.169.254/latest/meta-data/instance-id` - `curl -s --connect-timeout 1 169.254.169.254/latest/meta-data/placement/availability-zone` - BIGIP2\"\n",
           "cat << EOT > /etc/motd\n",
           "\n",
           "\n",
           "    * * * * * * * * * * * * *:  W A R N I N G  :* * * * * * * * * * * * * *\n",
           "    *                                                                     *\n",
           "    *                        THIS NODE IS BIGIP2                          *\n",
           "    *                                                                     *\n",
           "    * * * * * * * * * * * * *:  W A R N I N G  :* * * * * * * * * * * * * *\n",
           "    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n",
           "    *\n",
           "    *  Version: `tmsh show sys version | grep \" .Version\" | awk '{print $2}'`\n",
           "    *  Build:   `tmsh show sys version | grep \" .Build\" | awk '{print $2}'`\n",
           "    *\n",
           "    *\n",
           "    *  Mgmt Private IP Address: `curl -s --connect-timeout 1 169.254.169.254/latest/meta-data/local-ipv4`\n",
           "    *  AWS AZ: `curl -s --connect-timeout 1 169.254.169.254/latest/meta-data/placement/availability-zone`\n",
           "    *  Instance Type: `curl -s --connect-timeout 1 169.254.169.254/latest/meta-data/instance-type`\n",
           "    *  Instance-Id: `curl -s --connect-timeout 1 169.254.169.254/latest/meta-data/instance-id`\n",
           "    *\n",
           "    *  Environment: ${environment}\n",
           "    *  DeploymentName: ${deploymentName}\n",
           "    *\n",
           "    * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n\n",
           "EOT\n",
           "\n",
           "echo \"Workaround Signaling for failover deployment... patching file awsCloudProvider.js\"\n",
           "sed -i '2036s/AWS::AutoScaling::AutoScalingGroup/AWS::EC2::Instance/' /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs-aws/lib/awsCloudProvider.js\n",
           "echo \"End of our own customization.\"\n",
           "### END OUR CUSTOM CONFIGURATION\n",
		   "(crontab -l 2>/dev/null; echo '30 23 * * * /config/cloud/aws/run_failover_backup.sh 5') | crontab -\n",
           "tmsh save /sys config\n",
           "date\n",
           "echo 'custom-config.sh complete'\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getManagementGateway.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "GATEWAY_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "GATEWAY_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`",
           "echo $GATEWAY"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getNameServer.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "VPC_CIDR_BLOCK=`curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
           "VPC_NET=${VPC_CIDR_BLOCK%/*}",
           "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
           "echo $NAME_SERVER"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/onboard_config_vars": {
        "content": {
         "Fn::Join": [
          "",
          [
           "",
           "#!/bin/bash\n",
           "# Generated from 5.7.1\n",
           "hostname=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
           "region='",
           {
            "Ref": "AWS::Region"
           },
           "'\n",
           "deploymentName='",
           {
            "Ref": "deploymentName"
           },
           "'\n",
           "environment='",
           {
            "Ref": "environment"
           },
           "'\n",
           "adminUsername='admin'\n",
           "managementGuiPort='443'\n",
           "timezone='",
           {
            "Ref": "timezone"
           },
           "'\n",
           "ntpServer='",
           {
            "Ref": "ntpServer"
           },
           "'\n",
           "declarationUrl='",
           {
            "Ref": "declarationUrl"
           },
           "'\n",
           "allowPhoneHome='",
           {
            "Ref": "allowPhoneHome"
           },
           "'\n",
           "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/rm-password.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "date\n",
           "echo 'starting rm-password.sh'\n",
           "declare -a tmsh=()\n",
           "tmsh+=(\"rm /config/cloud/aws/.adminPassword\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  if $CMD;then\n",
           "      echo \"command $CMD successfully executed.\"\n",
           "  else\n",
           "      error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "  fi\n",
           "done\n",
           "date\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/cfe_config.json": {
        "content": {
         "Fn::Join": [
          "",
          [
           "{\n",
           "    \"class\":\"Cloud_Failover\",\n",
           "    \"controls\":{\n",
           "      \"class\":\"Controls\",\n",
           "      \"logLevel\":\"silly\"\n",
           "    },\n",
           "    \"environment\":\"aws\",\n",
           "    \"externalStorage\":{\n",
           "      \"scopingTags\":{\n",
           "      \"failover/f5_cluster\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      }\n",
           "    },\n",
           "    \"failoverRoutes\":{\n",
           "      \"scopingTags\":{\n",
           "      \"failover/f5_cluster\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      },\n",
           "      \"scopingAddressRanges\":[\n",
           "           {\n",
           "             \"range\":\"",
           {
            "Ref": "alienRangeCIDR"
           },
           "\"\n",
           "           }\n",
           "       ],\n",
           "      \"defaultNextHopAddresses\":{\n",
           "        \"discoveryType\":\"static\",\n",
           "        \"items\":[\n",
           "              \"",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "\",\n",
           "              \"",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az2Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "\"\n",
           "         ]\n",
           "       }\n",
           "     }\n",
           "}"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
	   "/config/cloud/aws/run_failover_backup.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "\n",
           "LOGFILE=\"/var/log/cloud/aws/run_failover_backup.log\"\n",
           "exec 1>>${LOGFILE} 2>&1\n",
           "LOCAL_UCS_DIR=\"/var/local/ucs\"\n",
           "nameUCS=\"${deploymentName}_BIGIP1-${HOSTNAME}_`date +%Y%m%d_%H%M`.ucs\"\n",
           "S3_BACKUP_DIR=\"/backup\"\n",
           "\n",
           "case \"$1\" in\n",
           "    \"\")\n",
           "       echo \"[`date +%Y-%m-%dT%H:%M:%S`] Missing argument. Provide the number of UCS files to keep [1-7]\"\n",
           "       exit 1;;\n",
           "    [1-7])\n",
           "       echo ;;\n",
           "    *)\n",
           "       echo \"[`date +%Y-%m-%dT%H:%M:%S`] Invalid argument. Provide the number of UCS files to keep [1-7]\"\n",
           "       exit 1;;\n",
           "esac\n",
           "\n",
           "KEEP_NR_FILES=$1\n",
           "\n",
           "echo \"[`date +%Y-%m-%dT%H:%M:%S`] starting backup...\"\n",
           "tmsh save sys ucs ${LOCAL_UCS_DIR}/${nameUCS}\n",
           "echo \"[`date +%Y-%m-%dT%H:%M:%S`] ucs locally saved, verifying integrity...\"\n",
           "gzip -t ${LOCAL_UCS_DIR}/${nameUCS}\n",
           "if [ $? != 0 ]; then\n",
           "   echo \"[`date +%Y-%m-%dT%H:%M:%S`] UCS file ${nameUCS} is corrupted! Exiting...\"\n",
           "   exit 1\n",
           "fi\n",
           "echo \"[`date +%Y-%m-%dT%H:%M:%S`] start pruning.. keep the last ${KEEP_NR_FILES} ucs archives\"\n",
           "ls -t1d ${LOCAL_UCS_DIR}/f5*.ucs | tail -n +$((KEEP_NR_FILES + 1)) | xargs rm -f\n",
           "echo \"[`date +%Y-%m-%dT%H:%M:%S`] sync ${LOCAL_UCS_DIR} with s3 bucket (dir=${S3_BACKUP_DIR})\"\n",
           "/usr/local/bin/aws s3 sync --delete ${LOCAL_UCS_DIR} s3://",
           {
            "Ref": "S3Bucket"
           },
           "${S3_BACKUP_DIR} --exclude '*' --include 'f5*.ucs' --delete\n",
           "if [ $? != 0 ]; then\n",
           "   echo \"[`date +%Y-%m-%dT%H:%M:%S`]aws s3 sync error!\"\n",
           "   exit 1\n",
           "fi\n",
           "echo \"[`date +%Y-%m-%dT%H:%M:%S`] backup successfully executed (file=${nameUCS})\"\n",
           "echo \"--------------\"\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/f5-appsvcs-3.20.0-3.noarch.rpm": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-appsvcs-extension/v3.20.0/f5-appsvcs-3.20.0-3.noarch.rpm"
       },
       "/config/cloud/f5-cloud-failover-1.5.0-0.noarch.rpm": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "https://github.com/F5Networks/f5-cloud-failover-extension/releases/download/v1.5.0/f5-cloud-failover-1.5.0-0.noarch.rpm"
       },
       "/config/cloud/f5-cloud-libs-aws.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.9.0/f5-cloud-libs-aws.tar.gz"
       },
       "/config/cloud/f5-cloud-libs.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.22.0/f5-cloud-libs.tar.gz"
       },
       "/config/installCloudLibs.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "echo about to execute",
           "checks=0",
           "while [ $checks -lt 120 ]; do echo checking mcpd",
           "    tmsh -a show sys mcp-state field-fmt | grep -q running",
           "    if [ $? == 0 ]; then",
           "        echo mcpd ready",
           "        break",
           "    fi",
           "    echo mcpd not ready yet",
           "    let checks=checks+1",
           "    sleep 10",
           "done",
           "echo loading verifyHash script",
           "if ! tmsh load sys config merge file /config/verifyHash; then",
           "    echo cannot validate signature of /config/verifyHash",
           "    exit",
           "fi",
           "echo loaded verifyHash",
           "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/config/cloud/f5-appsvcs-3.20.0-3.noarch.rpm\"  \"/config/cloud/f5-cloud-failover-1.5.0-0.noarch.rpm\")",
           "for fileToVerify in \"${filesToVerify[@]}\"",
           "do",
           "    echo verifying \"$fileToVerify\"",
           "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
           "        echo \"$fileToVerify\" is not valid",
           "        exit 1",
           "    fi",
           "    echo verified \"$fileToVerify\"",
           "done",
           "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
           "echo expanding f5-cloud-libs.tar.gz",
           "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo installing dependencies",
           "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo cloud libs install complete",
           "touch /config/cloud/cloudLibsReady"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
	   "/config/set-webproxy-variables.sh": {
        "content": {
         "Fn::If": [
          "noWebProxy",
          {
           "Fn::Join": [
            "",
            [
             "#!/bin/bash\n",
             "echo \"no web proxy is configured, doing nothing...\"\n"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             "#!/bin/bash\n",
             "echo setting web proxy variables in profile\n",
             { "Fn::Sub": "echo \"export HTTP_PROXY=http://${webProxyFQDN}:80\" >> /etc/profile.d/use_proxy.sh\n" },
             { "Fn::Sub": "echo \"export HTTPS_PROXY=http://${webProxyFQDN}:80\" >> /etc/profile.d/use_proxy.sh\n" },
             { "Fn::Sub": "echo \"export http_proxy=http://${webProxyFQDN}:80\" >> /etc/profile.d/use_proxy.sh\n" },
             { "Fn::Sub": "echo \"export https_proxy=http://${webProxyFQDN}:80\" >> /etc/profile.d/use_proxy.sh\n" },
             { "Fn::Sub": "echo \"export NO_PROXY=169.254.169.254,localhost,127.0.0.1,s3.${AWS::Region}.amazonaws.com\" >> /etc/profile.d/use_proxy.sh\n" },
             { "Fn::Sub": "echo \"export no_proxy=169.254.169.254,localhost,127.0.0.1,s3.${AWS::Region}.amazonaws.com\" >> /etc/profile.d/use_proxy.sh\n" }
            ]
           ]
          }
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/install-awscliv2.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "echo downloading aws cli v2",          
           "curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o /config/cloud/aws/awscliv2.zip",
           "echo installing aws cli v2",
           "unzip -q /config/cloud/aws/awscliv2.zip -d /config/cloud/aws/",
           "echo remount /usr in rw for installation",
           "mount -o remount,rw /usr",
           "/config/cloud/aws/aws/install",
           "if [ $? != 0 ]; then",
           "   echo error installing aws cli",
           "fi",
           "echo remount /usr in ro",
           "mount -o remount,ro /usr",         
           "echo cleanup aws cli v2 installation files",
           "rm -rf /config/cloud/aws/aws"          
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/verifyHash": {
        "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) e688cb153416abc85da081dd09d2dd4fd433c29f197fd927c12afa9e0d44699280b48a2ae93f19361dd0c3cdb72823205ed037ef0a10f7cfbef09f399aa620c8\n            set hashes(f5-cloud-libs-aws.tar.gz) fefa76ffe9e2c36d3b36b12f7c5a51f1fb8265221d000afafd113af07cbda30717bda03b26c9e10c636344a735e7ee59d8de172c6b970bcc24e161cdf01d354f\n            set hashes(f5-cloud-libs-azure.tar.gz) fa0d27d2cd69f965dcdc0dd79bb85baad47686af19a2013db2ee7fb486a0ccbd1072c3a34ef4553c28fe7387665e36557134cf6d4e221f2392f0b11eaf9bcbaf\n            set hashes(f5-cloud-libs-gce.tar.gz) e8f935a70aff0dbd19b8967c4ea35ca8027ff5657d929923aca971394370a269f4cbb960dd506abd34a36d82de0b3442e2f63c079c53cf1f0f023da110309cb6\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963\n            set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n            set hashes(f5-appsvcs-3.5.1-5.noarch.rpm) ba71c6e1c52d0c7077cdb25a58709b8fb7c37b34418a8338bbf67668339676d208c1a4fef4e5470c152aac84020b4ccb8074ce387de24be339711256c0fa78c8\n            set hashes(f5-appsvcs-3.18.0-4.noarch.rpm) e72ee8005a27070ac399ab097e8aa507a72aae4721d7491589cfeb821db3ef86cbc979e796ab319ec727bb51400ccda813c4b9eb4a6b3d1220a396b582f8f400\n            set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d\n            set hashes(f5-cloud-failover-1.5.0-0.noarch.rpm) 33a7e2d047106bcce681757a65240bfacedd48e13567e05fdb23a4b269d266aa5001f81158c3964dc297f0428db31c9df428002898d190285b349c59422a573b\n            set hashes(f5-cloud-failover-1.3.0-0.noarch.rpm) 19681eb33d9f910c913f8180199485eb653b4b5ebeaae0b90a6ce8341d7a22fed8d21815b5ba148c468852d20cc26fad4c4242e50ecc184f1f8770dacced6f6a\n            set hashes(f5-cloud-failover-1.4.0-0.noarch.rpm) 49e9108a070e0c8713aeb7b330662358542e61b7c53a9d45108d37a9bf5246f9e4aaae10cc61064801dcccd20bfd5108347b0f694510e7ece07f96c45ba683b0\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    }\n",
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/waitThenRun.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "while true; do echo \"waiting for cloud libs install to complete\"",
           "    if [ -f /config/cloud/cloudLibsReady ]; then",
           "        break",
           "    else",
           "        sleep 10",
           "    fi",
           "done",
           "\"$@\""
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       }
      }
     }
    }
   },
   "Properties": {
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda",
      "Ebs": {
       "DeleteOnTermination": "true",
       "VolumeSize": "100",
       "VolumeType": "gp2"
      }
     },
     {
      "DeviceName": "/dev/xvdb",
      "NoDevice": {}
     }
    ],
    "IamInstanceProfile": {
     "Ref": "bigipServiceDiscoveryProfile"
    },
    "ImageId": {
     "Fn::If": [
      "noCustomImageId",
      {
       "Fn::FindInMap": [
        "BigipRegionMap",
        {
         "Ref": "AWS::Region"
        },
        {
         "Ref": "imageName"
        }
       ]
      },
      {
       "Ref": "customImageId"
      }
     ]
    },
    "InstanceType": {
     "Ref": "instanceType"
    },
    "KeyName": {
     "Ref": "sshKey"
    },
    "NetworkInterfaces": [
     {
      "Description": "Management Interface",
      "DeviceIndex": "0",
      "NetworkInterfaceId": {
       "Ref": "Bigip2ManagementInterface"
      }
     },
     {
      "Description": "Public or External Interface",
      "DeviceIndex": "1",
      "NetworkInterfaceId": {
       "Ref": "Bigip2subnet1Az2Interface"
      }
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "ConfigManagement",
      "Value": {
       "Ref": "configmanagement"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "MonitoringLevel",
      "Value": {
       "Ref": "monitoringlevel"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Big-IP2: ",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "OS",
      "Value": {
       "Ref": "os"
      }
     },
     {
      "Key": "Platform",
      "Value": {
       "Ref": "platform"
      }
     },
     {
      "Key": "PowerPolicy",
      "Value": {
       "Ref": "powerpolicy"
      }
     },
     {
      "Key": "SLA",
      "Value": {
       "Ref": "sla"
      }
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\n",
        {
         "Fn::If": [
          "noWebProxy",
          "\n",
          {
           "Fn::Join": [
            "",
            [
             { "Fn::Sub": "export HTTPS_PROXY=\"http://${webProxyFQDN}:80\"\n" },
			 { "Fn::Sub": "export HTTP_PROXY=\"http://${webProxyFQDN}:80\"\n" },
             { "Fn::Sub": "export https_proxy=\"http://${webProxyFQDN}:80\"\n" },
             { "Fn::Sub": "export http_proxy=\"http://${webProxyFQDN}:80\"\n" },
             { "Fn::Sub": "export NO_PROXY=\"169.254.169.254,localhost,${Bigip1ManagementInterfacePrivateIp},${Bigip2ManagementInterfacePrivateIp}\"\n" },
             { "Fn::Sub": "export no_proxy=\"169.254.169.254,localhost,${Bigip1ManagementInterfacePrivateIp},${Bigip2ManagementInterfacePrivateIp}\"\n" },
             "DEF_GW=`ip route show default | awk '/default/ {print $3}'`\n",
             "LOGFILE=\"/tmp/trouble.log\"\n",
             "echo \"DEF_GW=$DEF_GW\"\n",
             "for ((i=1;i<=20;i++));\n",
             "do\n",
             "ping -W 1 -c 1 $DEF_GW &> /dev/null\n",
             "if [ $? -eq 0 ]; then\n",
             "echo \"$(date): def gw PING success\" >> $LOGFILE\n",
             "else\n",
             "echo \"$(date): def gw PING failed\" >> $LOGFILE\n",
             "fi\n",
             { "Fn::Sub": "echo \"$(date);$(nslookup -debug -timeout=1 ${webProxyFQDN});$(date)\" >> $LOGFILE\n" },
             "sleep 3\n",
             "done\n"	 
            ]
           ]
          }
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           "/opt/aws/apitools/cfn-init/bin/cfn-init -v -s ",
           {
            "Ref": "AWS::StackId"
           },
           " -r ",
           "Bigip2Instance",
           " --region ",
           {
            "Ref": "AWS::Region"
           },
           "\n"
          ]
         ]
        }
       ]
      ]
     }
    }
   },
   "Type": "AWS::EC2::Instance"
  },
  "Bigip2ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip2ManagementEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip2ManagementEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip2ManagementInterface"
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip2ManagementInterface": {
   "Properties": {
    "Description": "Management Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipManagementSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "managementSubnetAz2"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip2subnet1Az2Interface": {
   "Properties": {
    "Description": "Public External Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipExternalSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "subnet1Az2"
    },
    "Tags": [
     {
      "Key": "failover/f5_cluster",
      "Value": {
       "Ref": "AWS::StackName"
      }
     }
    ]
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip2subnet1Az2SelfEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip2subnet1Az2SelfEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip2subnet1Az2SelfEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip2subnet1Az2Interface"
    },
    "PrivateIpAddress": {
     "Fn::GetAtt": [
      "Bigip2subnet1Az2Interface",
      "PrimaryPrivateIpAddress"
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "S3Bucket": {
   "Properties": {
    "AccessControl": "BucketOwnerFullControl",
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "IgnorePublicAcls": true,
     "BlockPublicPolicy": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "failover/f5_cluster",
      "Value": {
       "Ref": "AWS::StackName"
      }
     }
    ]
   },
   "Type": "AWS::S3::Bucket"
  },
  "bigipExternalSecurityGroup": {
   "Properties": {
    "GroupDescription": "Public or external interface rules",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": "80",
      "IpProtocol": "tcp",
      "ToPort": "80"
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": "443",
      "IpProtocol": "tcp",
      "ToPort": "443"
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "IpProtocol": "-1"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip External Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipManagementSecurityGroup": {
   "Properties": {
    "GroupDescription": "BIG-IP management interface policy",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": "22",
      "IpProtocol": "tcp",
      "ToPort": "22"
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": "443",
      "IpProtocol": "tcp",
      "ToPort": "443"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip Management Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipSecurityGroupIngressConfigSync": {
   "Properties": {
    "FromPort": "4353",
    "GroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "ToPort": "4353"
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  },
  "bigipSecurityGroupIngressHa": {
   "Properties": {
    "FromPort": "1026",
    "GroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "IpProtocol": "udp",
    "SourceSecurityGroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "ToPort": "1026"
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  },
  "bigipSecurityGroupIngressManagmentAcross": {
   "Properties": {
    "FromPort": "443",
    "GroupId": {
     "Ref": "bigipManagementSecurityGroup"
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "ToPort": "443"
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  },
  "bigipServiceDiscoveryAccessRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "ec2.amazonaws.com"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Path": "/",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeAddresses",
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeRouteTables",
          "ec2:ReplaceRoute",
          "ec2:assignprivateipaddresses",
          "ec2:DescribeTags",
          "sts:AssumeRole",
          "s3:ListAllMyBuckets",
          "ec2:UnassignPrivateIpAddresses",
          "cloudformation:ListStackResources",
          "cloudformation:SignalResource"
         ],
         "Effect": "Allow",
         "Resource": [
          "*"
         ]
        },
        {
         "Action": [
          "s3:GetObject"
         ],
         "Effect": "Allow",
         "Resource": {
          "Ref": "bigIqPasswordS3Arn"
         }
        },
        {
         "Action": [
          "s3:ListBucket",
          "s3:GetBucketTagging"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:*:s3:::",
            {
             "Ref": "S3Bucket"
            }
           ]
          ]
         }
        },
        {
         "Action": [
          "s3:PutObject",
          "s3:GetObject",
          "s3:DeleteObject"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:*:s3:::",
            {
             "Ref": "S3Bucket"
            },
            "/*"
           ]
          ]
         }
        },
        {
         "Action": [
          "ec2:CreateRoute",
          "ec2:ReplaceRoute"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:*:ec2:",
            {
             "Ref": "AWS::Region"
            },
            ":",
            {
             "Ref": "AWS::AccountId"
            },
            ":route-table/*"
           ]
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "BigipServiceDiscoveryPolicy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "bigipServiceDiscoveryProfile": {
   "Properties": {
    "Path": "/",
    "Roles": [
     {
      "Ref": "bigipServiceDiscoveryAccessRole"
     }
    ]
   },
   "Type": "AWS::IAM::InstanceProfile"
  }
 }
}
